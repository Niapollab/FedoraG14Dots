#!/bin/bash

__sshcmd() {
    # Returns the ssh command to use for the tunnel.
    #
    # Parameters:
    #   None
    #
    # Returns:
    #   str: The ssh command to use for the tunnel.

    if command -v autossh >/dev/null 2>&1; then
        echo "autossh -M 0"
    else
        echo "ssh"
    fi
}

__ssocks() {
    # Establishes a VPN connection using shadowsocks to the specified server.
    #
    # Parameters:
    #   config_file (str): The path to the shadowsocks configuration file.
    #   server_ip (str): The IP address of the server to connect to.
    #   gateway (str): The IP address of the gateway to use for the VPN connection.
    #   interface (str): The name of the network interface to use for the VPN connection.
    #   tun_device (str): The name of the TUN device to use for the VPN connection.
    #   tun_ip (str): The IP address to use for the TUN device.
    #   tun_mask (str): The subnet mask to use for the TUN device.
    #
    # Returns:
    #   None

    local config_file
    local server_ip
    local gateway
    local interface
    local tun_device
    local tun_ip
    local tun_mask

    config_file="$1"
    server_ip="$2"
    gateway="$3"
    interface="$4"
    tun_device="$5"
    tun_ip="$6"
    tun_mask="$7"

    # Create TUN device
    ip tuntap add mode tun name "$tun_device"
    ip addr add "$tun_ip/$tun_mask" dev "$tun_device"
    ip link set "$tun_device" up

    # Add routes
    ip route add "$server_ip" via "$gateway" dev "$interface"
    ip route add default via "$tun_ip" dev "$tun_device"

    # Start shadowsocks
    sslocal --protocol tun -c "$config_file" --tun-interface-name "$tun_device"

    # Remove routes
    ip route del default via "$tun_ip" dev "$tun_device"
    ip route del "$server_ip" via "$gateway" dev "$interface"

    # Remove TUN device
    ip tuntap del mode tun name "$tun_device"
}

serveo() {
    # Establishes a reverse proxy tunnel to serveo.net.
    #
    # Parameters:
    #   local_port (int): The local port to use for the tunnel. Defaults to 8000.
    #   username (str): The username to use for the tunnel. Defaults to the current user.
    #   remote_port (int): The remote port to use for the tunnel. Defaults to 80.
    #
    # Returns:
    #   str: The local port, username, and remote port used for the tunnel, separated by spaces.

    local local_port
    local username
    local remote_port

    local_port="${1-8000}"
    username="${2-$(whoami)}"
    remote_port="${3-80}"

    eval "$(__sshcmd)" -R "$username":"$remote_port":localhost:"$local_port" serveo.net
}

localhost-run() {
    # Establishes a reverse proxy tunnel to localhost.run.
    #
    # Parameters:
    #   local_port (int): The local port to use for the tunnel. Defaults to 8000.
    #   remote_port (int): The remote port to use for the tunnel. Defaults to 80.
    #
    # Returns:
    #   str: The local port and remote port used for the tunnel, separated by spaces.

    local local_port
    local remote_port
    local args

    local_port="${1-8000}"
    remote_port="${2-80}"

    # Skip local_port and remote_port if provided
    args="$(printf '%s ' "${@:3}")"
    [ $# -gt 2 ] && args="-- ${args}"

    eval "$(__sshcmd)" -R "$remote_port":localhost:"$local_port" localhost.run "$args"
}

ssocks-tun() {
    # Establishes a VPN connection using shadowsocks to the specified server.
    #
    # Parameters:
    #   None
    #
    # Returns:
    #   None

    local CONFIG_FILE
    local SERVER_IP
    local TUN_DEVICE
    local TUN_IP
    local TUN_MASK
    local GATEWAY
    local INTERFACE

    CONFIG_FILE="$HOME/.config/shadowsocks/config.json"
    SERVER_IP="$(jq -r .server "$CONFIG_FILE" | xargs dig +short)"
    TUN_DEVICE="t2s"
    TUN_IP="192.168.69.1"
    TUN_MASK="24"
    GATEWAY=$(ip route | grep 600 | grep default | awk '{print $3}')
    INTERFACE=$(ip route | grep 600 | grep default | awk '{print $5}')

    sudo sh -c "$(declare -f __ssocks); __ssocks \"$CONFIG_FILE\" \"$SERVER_IP\" \"$GATEWAY\" \"$INTERFACE\" \"$TUN_DEVICE\" \"$TUN_IP\" \"$TUN_MASK\""
}

activate() {
    # Activates a Python virtual environment.
    #
    # Parameters:
    #   venv_dir (str): The path to the virtual environment directory. Defaults to ".env".
    #
    # Returns:
    #   None

    local venv_dir
    venv_dir="${1-.venv}"

    # shellcheck disable=SC1091
    . "$venv_dir/bin/activate"
}

anime() {
    # Controls the anime on the Asus ROG Zephyrus G14 GA402XV.
    #
    # Parameters:
    #   anime_switch (str): The switch to turn the anime on or off. Defaults to "off".
    #       on: Enables the anime.
    #       off: Disables the anime.
    #   anime_mode (str): The mode of the anime.
    #       i|image: Displays a static image.
    #       pi|pixel-image: Displays a pixel art image.
    #       gif: Displays a GIF.
    #       pg|pixel-gif: Displays a pixel art GIF.
    #   path (str): The path to the static image, pixel art image, GIF, or pixel art GIF.
    #   args (list): Additional arguments to pass to the asusctl anime command.
    #
    # Returns:
    #   None

    local anime_switch
    local anime_mode

    anime_switch="$1"
    anime_mode="$2"

    for pid in $(ps -ef | awk '/asusctl.*anime/ {print $2}'); do kill -s SIGINT "$pid"; done 1>/dev/null 2>&1
    asusctl anime --enable-display false 1>/dev/null 2>&1

    if [ "$anime_switch" = "on" ]; then
        case "$anime_mode" in
                i|image)
                    asusctl anime --enable-display true
                    asusctl anime image --path "$3" "${@:4}" & disown
                    ;;
                pi|pixel-image)
                    asusctl anime --enable-display true
                    asusctl anime pixel-image --path "$3" "${@:4}" & disown
                    ;;
                gif)
                    asusctl anime --enable-display true
                    asusctl anime gif --loops 0 --path "$3" "${@:4}" & disown
                    ;;
                pg|pixel-gif)
                    asusctl anime --enable-display true
                    asusctl anime pixel-gif --loops 0 --path "$3" "${@:4}" & disown
                    ;;
            esac
    fi
}

zode() {
    # Open a file or directory in VS Code using zoxide.
    #
    # Args:
    #   regex (str): A regex pattern to search for in the zoxide database. If the regex does not match any entry, the regex will be interpreted as a path and passed directly to the VS Code CLI.
    #
    # Returns:
    #   None

    local regex
    local filepath

    regex="$1"

    if command -v zoxide >/dev/null 2>&1; then
        filepath="$(zoxide query "$regex")"

        [[ -n "$filepath" ]] && code "$filepath"
    else
        code "$regex"
    fi
}
